import {
	resetActionChoices,
	resetSimulation,
	setDifferentSituation,
} from '@/actions/actions'
import AnswerList from '@/components/conversation/AnswerList'
import Title from '@/components/groupe/Title'
import { NGCRulesNodes, safeGetSituation } from '@/components/publicodesUtils'
import useBranchData, { BranchData } from '@/components/useBranchData'
import AutoCanonicalTag from '@/components/utils/AutoCanonicalTag'
import {
	setSituationForValidKeys,
	useEngine,
} from '@/components/utils/EngineContext'
import { ScrollToTop } from '@/components/utils/Scroll'
import { AppState } from '@/reducers/rootReducer'
import GridChart from '@/sites/publicodes/chart/GridChart'
import RavijenChart from '@/sites/publicodes/chart/RavijenChart'
import ActionSlide from '@/sites/publicodes/fin/ActionSlide'
import Budget from '@/sites/publicodes/fin/Budget'
import FinShareButton from '@/sites/publicodes/fin/FinShareButton'
import { CardGrid } from '@/sites/publicodes/ListeActionPlus'
import { getQuestionsInRules } from '@/sites/publicodes/pages/QuestionList'
import {
	fetchAndSetAvailablePersonas,
	Persona,
} from '@/sites/publicodes/personas/personasUtils'
import RawActionsList from '@/sites/publicodes/personas/RawActionsList'
import RulesCompletion from '@/sites/publicodes/personas/RulesCompletion'
import Summary from '@/sites/publicodes/personas/Summary'
import { Simulation } from '@/types/simulation'
import { useEffect, useState } from 'react'
import emoji from 'react-easy-emoji'
import { Trans, useTranslation } from 'react-i18next'
import { useDispatch, useSelector } from 'react-redux'
import { useNavigate, useSearchParams } from 'react-router-dom'
import yaml from 'yaml'
import { questionConfig } from './questionConfig'

const visualisationChoices = {
	summary: { titre: 'Description', composant: Summary },
	actionList: { titre: 'Actions associ√©es', composant: RawActionsList },
	exhaustivite: {
		titre: 'Exhaustivit√© des r√®gles',
		composant: RulesCompletion,
	},
	profil: { titre: 'D√©tail R√©ponses', composant: AnswerList },
	ravijen: { titre: 'Graphe Bilan', composant: RavijenChart },
	budget: { titre: 'Page de fin - Budget', composant: Budget },
	'sous-cat√©gories': { titre: 'Page de fin - Grille', composant: GridChart },
	action: { titre: 'Page de fin - Top 3 actions', composant: ActionSlide },
	emojis: {
		titre: 'Partage RS',
		composant: () => <FinShareButton showResult />,
	},
}

export default () => {
	const selectedPersona = useSelector(
		(state: AppState) => state.simulation?.persona
	)

	const [searchParams, setSearchParams] = useSearchParams({
		visualisation: 'summary',
	})

	const visualisationParam = searchParams.get('visualisation')

	const VisualisationComponent =
		visualisationChoices[`${visualisationParam}`]?.composant

	const engine = useEngine()
	const rules = useSelector((state: AppState) => state.rules)
	const personasQuestions = getQuestionsInRules(engine, rules).filter(
		({ type }) => !type.includes('Mosa√Øque')
	)

	const visualisationComponentProps = {
		score: engine.evaluate('bilan').nodeValue,
		headlessMode: true,
		engine: engine,
		rules: rules,
		persona: selectedPersona,
	}

	return (
		<div>
			<AutoCanonicalTag />

			<ScrollToTop />

			<Title data-cypress-id="personas-title" title={<Trans>Personas</Trans>} />
			<div
				css={`
					display: flex;
					flex-direction: row;
					align-items: center;
					margin-bottom: 1rem;
					@media (max-width: 800px) {
						flex-direction: column;
					}
				`}
			>
				<div>
					<p>
						<Trans>
							Les personas nous servent √† tester le simulateur sous toutes ses
							coutures, et √† v√©rifier qu‚Äôil s‚Äôadapte bien √† toutes les
							situations de vie des citoyens m√©tropolitains. De par leur
							pr√©sence, ils nous forcent √† penser √† tous les cas d‚Äôusage, pour
							nous projeter dans diff√©rentes r√©alit√©s, et inclure ces r√©alit√©s
							dans nos refontes du parcours de test et des actions propos√©es √†
							la fin de ce dernier.{' '}
						</Trans>
					</p>
					<p>
						<Trans>
							Cette page vous permet de naviguer dans les parcours Nos Gestes
							Climat comme si vous √©tiez l'un des profils types que nous avons
							list√©s.
						</Trans>
					</p>
					<p>
						‚û°Ô∏è{' '}
						<em>
							<Trans>
								S√©lectionnez un persona et √©ventuellement un graphique √†
								afficher.
							</Trans>
						</em>
					</p>
				</div>
				<div
					className="ui__ card box"
					css={`
						min-width: 16rem;
						align-items: flex-start !important;
						text-align: left !important;
					`}
				>
					{Object.entries(visualisationChoices).map(([id, elt]) => (
						<label key={id}>
							<input
								onChange={() => setSearchParams({ visualisation: id })}
								type="radio"
								value={id}
								checked={searchParams.get('visualisation') === id}
							/>
							{elt.titre}
						</label>
					))}
				</div>
			</div>
			{selectedPersona && (
				<div
					css={`
						max-width: 35rem;
						margin: 0 auto;
						display: flex;
						justify-content: center;
						${visualisationParam === 'ravijen' &&
						`
						height: 45rem;
						`};
					`}
				>
					<VisualisationComponent {...visualisationComponentProps} />
				</div>
			)}
			<PersonaGrid selectedPersona={selectedPersona} />
			<PersonaExplanations personasQuestionList={personasQuestions} />
		</div>
	)
}

export const PersonaGrid = ({
	selectedPersona,
}: {
	selectedPersona: Persona | undefined
}) => {
	const { i18n } = useTranslation()
	const dispatch = useDispatch(),
		objectif = 'bilan'

	const [availablePersonas, setAvailablePersonas] = useState<Persona[]>([])
	const engine = useEngine()

	const branchData: BranchData = useBranchData()
	const lang = i18n.language === 'en' ? 'en-us' : i18n.language

	const navigate = useNavigate()
	const [params] = useSearchParams()
	const redirect = params.get('redirect')

	useEffect(() => {
		if (branchData.loaded) {
			fetchAndSetAvailablePersonas(
				`/personas-${lang}.json`,
				branchData,
				setAvailablePersonas
			)
		}
	}, [branchData.loaded, branchData.deployURL, lang])

	if (availablePersonas.length === 0) {
		return null
	}

	const setPersona = (persona: Persona) => {
		const safeSituation = safeGetSituation(
			persona.situation,
			engine.getParsedRules() as NGCRulesNodes
		)
		setSituationForValidKeys({
			engine,
			situation: persona.situation,
		})
		const missingVariables = engine.evaluate(objectif).missingVariables
		const defaultMissingVariables = Object.keys(missingVariables)

		const newSimulation: Simulation = {
			config: { objectifs: [objectif], questions: questionConfig },
			url: '/simulateur/bilan',
			// the schema of personas is not fixed yet
			situation: persona.situation,
			persona: persona,
			// If not specified, act as if all questions were answered : all that is not in
			// the situation object is a validated default value
			foldedSteps:
				Object.entries(persona.situation)?.length === 0
					? defaultMissingVariables
					: Object.keys(safeSituation),
		}

		dispatch(setDifferentSituation(newSimulation))

		if (redirect) navigate(redirect)
	}

	return (
		<CardGrid
			css={`
				padding: 0;
				justify-content: center;
				li {
					margin: 0.4rem;
				}
			`}
		>
			{availablePersonas.map((persona) => {
				const { nom, ic√¥nes, description, r√©sum√© } = persona
				return (
					<li key={nom}>
						<button
							className={`ui__ card box interactive light-border ${
								selectedPersona?.nom === nom ? 'selected' : ''
							}`}
							css={`
								width: 11rem !important;
								height: 13rem !important;
								padding: 0.5rem 0.25rem 0.5rem 0.25rem !important;
								margin: 0 !important;
								img {
									margin-bottom: 0.5rem;
								}
							`}
							onClick={() => {
								if (selectedPersona?.nom === nom) {
									dispatch(resetSimulation())
									dispatch(resetActionChoices())
								} else {
									setPersona(persona)
								}
							}}
						>
							<div
								css={`
									text-transform: uppercase;
									color: var(--color);
									font-size: 80%;
								`}
							>
								<div>{emoji(ic√¥nes ?? 'üë•')}</div>
								<div>{nom}</div>
							</div>
							<p>
								<small>{r√©sum√© ?? description}</small>
							</p>
						</button>
					</li>
				)
			})}
		</CardGrid>
	)
}

export const PersonaExplanations = ({ personasQuestionList }) => {
	return (
		<div
			css={`
				h2 {
					display: inline;
				}
				details {
					padding-bottom: 1rem;
				}
			`}
		>
			<details>
				<summary>
					<h2>
						<Trans>Qui sont-ils ?</Trans>
					</h2>
				</summary>
				<div>
					<Trans i18nKey={'publicodes.Personas.description'}>
						Nous les avons d√©finis pour qu‚Äôils repr√©sentent la diversit√© des cas
						d‚Äôusage du simulateur.{' '}
						<i>
							Toute ressemblance avec une personne existant ou ayant exist√©
							serait purement fortuite !
						</i>{' '}
						En aucune mesure, on ne peut dire qu‚Äôils sont repr√©sentatifs de la
						distribution de la population fran√ßaise : il ne s‚Äôagit pas de coller
						aux statistiques de la population, mais de retrouver parmi nos dix
						personas au moins un qui repr√©sente chaque usage majeur et
						diff√©renciant pour le simulateur. Ainsi, nous avons fait varier pour
						chacun d‚Äôentre eux :
						<ul>
							<li>
								Leur genre : m√™me s‚Äôil n‚Äôinflue pas sur l‚Äôempreinte, il serait
								√©tonnant de n‚Äôavoir que des personas ‚Äúfemmes‚Äù
							</li>{' '}
							<li>
								Leur √¢ge et situation personnelle / professionnelle : au moins
								un √©tudiant, un retrait√©, un adulte au foyer, un actif
							</li>{' '}
							<li>
								La taille de leur foyer : de 1 personne √† famille nombreuse
							</li>{' '}
							<li>
								Leur lieu de vie : de l‚Äôurbain, du rural et du p√©ri-urbain, dans
								le nord, dans le sud, les plaines, la montagne et sur une √Æle
							</li>{' '}
							<li>
								Leur logement : de l‚Äôappartement √† la maison, du neuf √† l‚Äôancien
							</li>
							<li>
								Leurs modes de transport : de la marche √† la voiture en passant
								par le ferry et l‚Äôavion
							</li>{' '}
							<li>
								Leur r√©gime alimentaire : au moins un v√©g√©talien, un v√©g√©tarien,
								une personne ne mangeant que du poisson, et un amateur de viande
								rouge
							</li>{' '}
							<li>
								Leur tendance √† l‚Äôachat : du tout occasion au tout neuf, de
								l‚Äôacheteur compulsif √† celui ou celle qui n‚Äôach√®te presque rien
							</li>{' '}
							<li>
								Leur fa√ßon de partir en vacances : mode de transport,
								h√©bergement, on trouve de tout
							</li>{' '}
							<li>Leurs loisirs : de la culture, du sport, du bien-√™tre‚Ä¶</li>
						</ul>
					</Trans>
				</div>
			</details>
			<details>
				<summary>
					<h2>
						<Trans>Quelle est la liste des questions du mod√®le ?</Trans>
					</h2>
				</summary>
				<div>
					<p>
						<Trans i18nKey={'publicodes.Personas.listeQuestions'}>
							La liste des questions du mod√®le est accessible sur la page{' '}
							<a href="/questions">/questions</a>. La liste exhaustive de toutes
							les r√®gles pour d√©finir un persona est :
						</Trans>
					</p>
					<pre
						className="ui__ code"
						css={`
							font-size: 90%;
							height: 10rem;
						`}
					>
						<code>{yaml.stringify(personasQuestionList)}</code>
					</pre>
					<button
						className="ui__ button small"
						onClick={() => {
							navigator.clipboard.writeText(
								JSON.stringify(personasQuestionList)
							)
						}}
					>
						<Trans>Copier le YAML</Trans>
					</button>
				</div>
			</details>
			<details>
				<summary>
					<h2>
						<Trans>Comment les mettons-nous √† jour ?</Trans>
					</h2>
				</summary>
				<div>
					<Trans i18nKey={'publicodes.Personas.maj'}>
						Pour qu‚Äôils ou elles continuent de repr√©senter la diversit√© des cas
						d‚Äôusage du simulateur d‚Äôempreinte carbone, nous les √©ditons √† chaque
						ajout ou modification de ce dernier, en respectant les r√®gles
						suivantes :
						<ul>
							<li>
								Chaque r√©ponse possible est attribu√©e √† au moins un persona
							</li>{' '}
							<li>
								Au moins un persona ne r√©pond rien √† la question (il lui est
								donc attribu√© la valeur par d√©faut donn√©e dans le simulateur).
							</li>
						</ul>
					</Trans>
				</div>
			</details>
		</div>
	)
}
